---
title: "Part1"
format: pdf
editor: visual
---

Import library

```{r}
requiredPackages<-c("readxl","tidyverse","reshape2","stringr","sjmisc","ggpubr","matrixStats", "gridExtra","corrplot","nlme","lme4","car","emmeans","multcomp","multcompView", "lmtest","GGally","RColorBrewer")

for(package in requiredPackages){
  if(!requireNamespace(package, quietly=TRUE))
    install.packages(package)
}

library(readxl)
library(tidyverse)
library(reshape2)
library(stringr)
library(sjmisc)
library(ggpubr)
library(matrixStats)
library(gridExtra)
library(corrplot)
library(nlme)
library(lme4)
library(car)
library(emmeans)
library(multcomp)
library(multcompView)
library(lmtest)
library(GGally)
library(RColorBrewer)
```

Zuweisen files und Erstellen der data containers (lists)

```{r}
list_dfs<-list()

list1<-list()

list_paths<-list("C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/Run2",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/Run4",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/Run5",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/14-15.02.2024_Run7/einzeln",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/21.2.2024_Run8/einzeln",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/23-24.2.2024_Run9/einzeln",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/26.2_Hc_solo/VNIR",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/28.2_Run10/einzeln",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/1.3_Run11/einzeln",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/4.3_Run12/einzeln",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/6.3_Run13/einzeln",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/8.3_Run14",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/11.3",
                 "C:/Users/HabisohnC/Desktop/WhaetVIZ_cleanData/13.3")
```

Einlesen der files

```{r}
for(i in list_paths){path<-i
filenames<-list.files(path, full.names = T)
for(i in filenames){
    newfile<-read.csv(i)
    output<-gsub(path, 
               paste0("Run_", gsub("-","_", newfile[1,1])),
               tools::file_path_sans_ext(i))
    assign(output, newfile)
    list1[[length(list1)+1]]=output
    list_dfs[[length(list_dfs)+1]]=newfile
    names(list_dfs)<-list1
    rm(newfile)
    rm(output)
}}

```

Erstellen data containers für filtered lists und merged lists:

```{r}
list_Fc_Plant<-list()
list_Kinetic<-list()
list_Hc_Plant<-list()
list_Hc_avgSpectrum<-list()
list_Rgb_Morpho_Plant<-list()
list_Rgb_Color_Plant<-list()

list_merged_tables<-list()
list_merged_tables2<-list()
list_merged_tables3<-list()
```

Sortieren der files und Zuweisung zu entsprechender Liste chronologisch:

```{r}
list_extension(names(list_dfs))
```

Measurement type-files filtern nach relevant content und Aufbewahrung in getrennten Listen:

```{r}

list_cutFc<-lapply(list_Fc_Plant, function(x){x%>%dplyr::select(Measuring.Date, Plant.ID, Fm:Size)%>%mutate(Measuring.Date=x$Measuring.Date[1])})

list_cutHc<-lapply(list_Hc_Plant, function(x){x%>%dplyr::select(Measuring.Date, Plant.ID, ends_with("avg"), ends_with("median"))%>%mutate(Measuring.Date=x$Measuring.Date[1])})


list_cutKin<-lapply(list_Kinetic, function(x){x%>%dplyr::select(Measuring.Date, Plant.ID, X50000:X3150000 )%>%mutate(Measuring.Date=x$Measuring.Date[1])})


#colSums(is.na("any list"))
#"colSums(is.na(allData_IndicesBOnitur))
#       Plant.ID  Measuring.Date      Plant.Name Plant.Name.solo       Condition      #LeafNumber    TillerNumber 
#              0               0               0               0               0        #       0               0 
#          MCARI             PRI            NDVI 
#              0               0               0 
#"
```

Erstellen Metatable:

```{r}
metatable<-cbind(list_Hc_Plant[[8]]$Plant.ID,list_Hc_Plant[[8]]$Tray.Info, list_Hc_Plant[[8]]$Plant.Name)
colnames(metatable)<-c("Plant.ID", "Tray.Info","Plant.Name")
metatable<-as_tibble(metatable)
metatable<-metatable %>% mutate(Condition = if_else(grepl("*DS", Tray.Info), "Drought stress", "Control" ))


placeholdertable<-data.frame(Plant.Name="none")

for(i in metatable$Plant.Name){modified_string <- gsub("^.*?_", "", i)
placeholdertable<-rbind(placeholdertable, modified_string)}
placeholdertable<-placeholdertable[-1,]
metatable<-metatable%>%mutate(Plant.Name.solo=placeholdertable)

```

und watertable:

```{r}
water_readings<-read_csv("C:/Users/HabisohnC/Desktop/WhaetVIZ_metadata/water_readings.csv")
water_readings_DSOnly<-water_readings%>%dplyr::select(contains("DS"))
dates_water_readings<-c("2024-01-17","2024-01-22","2024-01-24","2024-01-25","2024-01-26",
                        "2024-01-29","2024-01-30","2024-01-31","2024-02-01","2024-02-02",
                        "2024-02-06","2024-02-07","2024-02-08","2024-02-09","2024-02-12",
                        "2024-02-13","2024-02-14","2024-02-15","2024-02-16","2024-02-19",
                        "2024-02-20","2024-02-21","2024-02-22","2024-02-23",
                        "2024-02-26","2024-02-27","2024-02-28","2024-02-29","2024-03-01",
                        "2024-03-04","2024-03-05","2024-03-06","2024-03-07","2024-03-08",
                        "2024-03-11","2024-03-12","2024-03-13","2024-03-14","2024-03-15",
                        "2024-03-18")
water_readings<-water_readings%>%mutate(Dates=dates_water_readings)%>%relocate(Dates)
water_readings_DSOnly<-water_readings_DSOnly%>%mutate(Dates=dates_water_readings)%>%relocate(Dates)
water_readings_justValues<-water_readings_DSOnly[,-1]#brauch ich für meine Funktion"build_water_info()"
water_readings_DSOnly_mean_sd<-water_readings_DSOnly%>%mutate(Mean=rowMeans(.[,2:ncol(.)]))%>%
                                                           mutate(SD=rowSds(as.matrix(.[,2:(ncol(.)-1)])))
```

Verbinden der VORERST relevanten data tables zu neuen Listenelementen:

```{r}

#merging in steps --> only two dfs at a time possible

#1st merge
for(i in 1:length(list_cutHc)){merge_table<-merge(list_cutHc[i], list_cutFc[i], by="Plant.ID",all=TRUE) 

list_merged_tables[[length(list_merged_tables)+1]]<-merge_table}
 
list_merged_tables2<-lapply(list_merged_tables, function(x){x%>%dplyr::select(-Measuring.Date.y)})

#2nd merge
for(i in 1:length(list_cutHc)){merge_table<-merge(list_merged_tables2[i], list_cutKin[i], by="Plant.ID",all=TRUE) 

list_merged_tables3[[length(list_merged_tables3)+1]]<-merge_table}
 
list_merged_tables3<-lapply(list_merged_tables3, function(x){x%>%dplyr::select(-Measuring.Date)%>%rename(Measuring.Date=Measuring.Date.x)})
```

Melt list erstellen:

```{r}
list_melt_table<-lapply(list_merged_tables3, function(x){
  
  x%>% melt(measure.vars=3:41)
  }) 

```

```{r}

list_sd_and_mean<-lapply(list_melt_table, join_and_calc)

#Warnung: There were 80 warnings in `summarise()`.
#The first warning was:
#ℹ In argument: `Mean = (new("standardGeneric", .Data = function (x, ...) ...`.
#ℹ In group 1: `variable = NDVI.avg` and `Condition = "Control"`.
#Caused by warning in `mean.default()`:
#! Argument ist weder numerisch noch boolesch: gebe NA zurück
#ℹ Run dplyr::last_dplyr_warnings() to see the 79 remaining warnings.
##Warnung: There were 80 warnings in `summarise()`.
#The first warning was:
#ℹ In argument: `Mean = (new("standardGeneric", .Data = function (x, ...) ...`.
#ℹ In group 1: `variable = NDVI.avg` and `Condition = "Control"`.
#Caused by warning in `mean.default()`:
#! Argument ist weder numerisch noch boolesch: gebe NA zurück
#ℹ Run dplyr::last_dplyr_warnings() to see the 79 remaining warnings.

list_meltAndNames<-lapply(list_melt_table, merge_and_select)

list_of_names<-unlist(unique(list_meltAndNames[[4]]$Plant.Name.solo))
```

```{r}

names_andNDVIavg<-select_indices(list_meltAndNames, "NDVI.avg")

names_andNDVImedian<-select_indices(list_meltAndNames, "NDVI.median")

names_andPSRIavg<-select_indices(list_meltAndNames, "PSRI.avg")

names_andPSRImedian<-select_indices(list_meltAndNames, "PSRI.median")

names_andQY_max<-select_indices(list_meltAndNames, "QY_max")

names_andSize<-select_indices(list_meltAndNames, "Size")

names_andMCARI1avg<-select_indices(list_meltAndNames, "MCARI1.avg")

names_andPRIavg<-select_indices(list_meltAndNames, "PRI.avg")

```

```{r}
list_QY_max_andNames<-list()
list_NDVIavg_andNames<-list()
list_NDVImedian_andNames<-list()
list_PSRIavg_andNames<-list()
list_PSRImedian_andNames<-list()
list_Size_andNames<-list()
list_MCARI1avg_andNmaes<-list()

```

```{r}
####





for (i in unique(metatable$Plant.Name.solo)){
  list_QY_max_andNames[[length(list_QY_max_andNames)+1]]<- allDatesOneNameQY_max(i)
  
  #names(list_QY_max_andNames)<-list_of_names
  }

for(i in unique(metatable$Plant.Name.solo)){
  list_NDVIavg_andNames[[length(list_NDVIavg_andNames)+1]]<-allDatesOneNameNDVIavg(i)
  #names(list_NDVIavg_andNames)<-list_of_names
}


for(i in unique(metatable$Plant.Name.solo)){
  list_NDVImedian_andNames[[length(list_NDVImedian_andNames)+1]]<-allDatesOneNameNDVImedian(i)
  #names(list_NDVImedian_andNames)<-list_of_names
  }

for(i in unique(metatable$Plant.Name.solo)){
  list_PSRIavg_andNames[[length(list_PSRIavg_andNames)+1]]<-allDatesOneNamePSRIavg(i)
  #names(list_PSRIavg_andNames)<-list_of_names
}

for(i in unique(metatable$Plant.Name.solo)){
  list_PSRImedian_andNames[[length(list_PSRImedian_andNames)+1]]<-allDatesOneNamePSRImedian(i)
  #names(list_PSRImedian_andNames)<-list_of_names
  }

for (i in unique(metatable$Plant.Name.solo)){
  list_Size_andNames[[length(list_Size_andNames)+1]]<- allDatesOneNameSize(i)
}
  

for(i in unique(metatable$Plant.Name.solo)){list_MCARI1avg_andNmaes[[length(list_MCARI1avg_andNmaes)+1]]<-allDatesOneNameMCARI1avg(i)}

```

```{r}
list_plots_Size<-list()
list_plot_NDVIavg<-list()
list_plot_NDVImedian<-list()
list_plot_PSRIavg<-list()
list_plot_QYMax<-list()
list_plots_MCARI1<-list()
```

plotten

alle Genotypen einzeln für den jeweiligen Index:

```{r}

for(i in list_NDVIavg_andNames)
   {list_plot_NDVIavg[[length(list_plot_NDVIavg)+1]]<-
       ggplot(i, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=value,group=Plant.Name,
      color=Condition))+
     #geom_smooth(aes(color=condition, group=condition))+#kommt eventuell weg
     ylab("NDVI average")+xlab("Date")+labs(title=i$Plant.Name.solo[1])+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+
     geom_point(size=3)+theme_bw(base_size = 10)+
   scale_color_manual(values = c("Control"="turquoise3", 
                                                "Drought stress"="coral"))+
     theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16), 
           legend.text=element_text(size=12),legend.title = element_text(size=13), 
           axis.title.x = element_text(hjust=1),
           axis.text=element_text(size=13),axis.title=element_text(size=14))}





for(i in list_Size_andNames){list_plots_Size[[length(list_plots_Size)+1]]<-
  ggplot(i, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=value,group=Plant.Name, color=Condition))+
  theme_bw(base_size = 10)+
  #geom_smooth(aes(color=condition, group=condition))+#kommt eventuell weg
  ylab("Size")+xlab("Date")+labs(title=i$Plant.Name.solo[1])+
  geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+
     geom_point(size=3)+scale_color_manual(values = c("Control"="turquoise3", 
                                                          "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16),
        legend.text=element_text(size=12),legend.title = element_text(size=13), 
        axis.title.x = element_text(hjust=1),
        axis.text=element_text(size=13),axis.title=element_text(size=14))}





list_plot_PSRIavg<-list()

for(i in list_PSRIavg_andNames){list_plot_PSRIavg[[length(list_plot_PSRIavg)+1]]<-
  ggplot(i, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=value,group=Plant.Name, color=Condition))+
  theme_bw(base_size = 10)+
  #geom_smooth(aes(color=condition, group=condition))+#kommt eventuell weg
  ylab("PSRI average")+xlab("Date")+labs(title=i$Plant.Name.solo[1])+
  geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+
     geom_point(size=3)+
  scale_color_manual(values = c("Control"="turquoise3", 
              "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16), 
        legend.text=element_text(size=12),legend.title = element_text(size=13), 
      axis.title.x = element_text(hjust=1),
        axis.text=element_text(size=13),axis.title=element_text(size=14))}





for(i in list_QY_max_andNames){list_plot_QYMax[[length(list_plot_QYMax)+1]]<-
  ggplot(i, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=value,group=Plant.Name, color=Condition))+
  theme_bw(base_size = 10)+
  #geom_smooth(aes(color=condition, group=condition))+#kommt eventuell weg
  ylab("QY_max")+xlab("Date")+labs(title=i$Plant.Name.solo[1])+
  geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+
     geom_point(size=3)+
  scale_color_manual(values = c("Control"="turquoise3", 
                                "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=75, hjust=1.2), plot.title = element_text(size=16), 
        legend.text=element_text(size=12),legend.title = element_text(size=13),
        axis.title.x = element_text(hjust=1),
        axis.text=element_text(size=13),axis.title=element_text(size=14))}




for(i in list_MCARI1avg_andNmaes){list_plots_MCARI1[[length(list_plots_MCARI1)+1]]<-
  ggplot(i, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=value,group=Plant.Name, color=Condition))+
  ylab("MCARI1 average")+xlab("Date")+labs(title=i$Plant.Name.solo[1])+
  geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+
     geom_point(size=3)+
  theme_bw(base_size = 10)+
  #geom_smooth(aes(color=condition, group=condition))+#kommt eventuell weg
  scale_color_manual(values = c("Control"="turquoise3", 
                                "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16), 
        legend.text=element_text(size=12),legend.title = element_text(size=13), 
       axis.title.x = element_text(hjust=1),
       axis.text=element_text(size=13),axis.title=element_text(size=14))}


```

Listen erstellen zu:

Listen zu mean und sd einzelner Indices

Listen zu plots dieser Listenelemente

```{r}
#mean-sd listen:
list_mean_sd_MCARI1<-list()
list_mean_sd_NDVI<-list()
list_mean_sd_QY_max<-list()
list_mean_sd_PSRIavg<-list()
list_mean_sd_Size<-list()

#plots mean listen:
list_mean_plots_MCARI1<-list()
list_mean_plots_NDVI<-list()
list_mean_plots_QY_max<-list()
list_mean_plots_PSRI<-list()
list_mean_plots_Size<-list()
```

filling mean lists and plotting them:

```{r}

#make mean and sd_lists of each Genotype in list:
for(i in list_MCARI1avg_andNmaes){
  list_mean_sd_MCARI1[[length(list_mean_sd_MCARI1)+1]]<-i%>%
    group_by(Measuring.Date,Condition)%>%
    summarise(Mean=mean(value, na.rm=T),SD=sd(value, na.rm=T))%>%mutate(Name=i$Plant.Name.solo[1])}

#make plots of mean with scatterplots of all genotypes in list:
for(i in 1:length(list_mean_sd_MCARI1)){
  list_mean_plots_MCARI1[[length(list_mean_plots_MCARI1)+1]]<-
    list_plots_MCARI1[[i]]+geom_line(data=list_mean_sd_MCARI1[[i]], 
                                     aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=Mean, 
                                         color=Condition, group=Condition))}







for(i in list_NDVIavg_andNames){list_mean_sd_NDVI[[length(list_mean_sd_NDVI)+1]]<-
  i%>%group_by(Measuring.Date, Condition)%>%
  summarise(Mean=mean(value, na.rm=T),SD=sd(value, na.rm=T))%>%mutate(Name=i$Plant.Name.solo[1])}

for(i in 1:length(list_mean_sd_NDVI)){
  list_mean_plots_NDVI[[length(list_mean_plots_NDVI)+1]]<-
    list_plot_NDVIavg[[i]]+geom_line(data=list_mean_sd_NDVI[[i]], 
                                     aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=Mean, 
                                         color=Condition, group=Condition))}








for(i in list_QY_max_andNames){list_mean_sd_QY_max[[length(list_mean_sd_QY_max)+1]]<-
  i%>%group_by(Measuring.Date, Condition)%>% 
  summarise(Mean=mean(value, na.rm=T),SD=sd(value, na.rm=T))%>%mutate(Name=i$Plant.Name.solo[1])}


for(i in 1:length(list_mean_sd_QY_max)){
  list_mean_plots_QY_max[[length(list_mean_plots_QY_max)+1]]<-
    list_plot_QYMax[[i]]+geom_line(data=list_mean_sd_QY_max[[i]], 
                                     aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=Mean, 
                                         color=Condition, group=Condition))}









for(i in list_PSRIavg_andNames){
  list_mean_sd_PSRIavg[[length(list_mean_sd_PSRIavg)+1]]<-
  i%>%group_by(Measuring.Date, Condition)%>% 
  summarise(Mean=mean(value, na.rm=T),SD=sd(value, na.rm=T))%>%mutate(Name=i$Plant.Name.solo[1])}


for(i in 1:length(list_mean_sd_PSRIavg)){
  list_mean_plots_PSRI[[length(list_mean_plots_PSRI)+1]]<-
    list_plot_PSRIavg[[i]]+geom_line(data=list_mean_sd_PSRIavg[[i]], 
                                   aes(x=as.Date(Measuring.Date, format="%Y-%m-%d") , y=Mean, 
                                       color=Condition, group=Condition))}










for(i in list_Size_andNames){
  list_mean_sd_Size[[length(list_mean_sd_Size)+1]]<-
    i%>%group_by(Measuring.Date, Condition)%>% 
    summarise(Mean=mean(value, na.rm=T),SD=sd(value, na.rm=T))%>%mutate(Name=i$Plant.Name.solo[1])}


for(i in 1:length(list_mean_sd_Size)){
  list_mean_plots_Size[[length(list_mean_plots_Size)+1]]<-
    list_plots_Size[[i]]+geom_line(data=list_mean_sd_Size[[i]], 
                                     aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=Mean, 
                                         color=Condition, group=Condition))}


#.......für jeden Index/Parameter durchführbar :)
```

Average plots:

```{r}
path_plotaverage<-"plots/"


select_indices(list_sd_and_mean,"MCARI1.avg")%>%bind_rows()%>%ggplot(aes(x=as.Date(Date, format="%Y-%m-%d"),y=Mean,color=Condition))+
  ylab("MCARI1 average")+xlab("Date")+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),fill="lightgrey",alpha=0.02,color="lightgrey")+geom_point()+theme_bw(base_size = 10)+geom_errorbar(aes(ymin=Mean - SD, ymax=Mean+SD),
  width=.2, position=position_dodge(0.05))+
  scale_color_manual(values = c("Control"="turquoise3", 
                                "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),legend.text=element_text(size=12),
        legend.title = element_text(size=13),
        axis.title.x = element_text(hjust=1),
       axis.text=element_text(size=13),axis.title=element_text(size=14))

#ggsave("MCARIaverage.pdf")

ggsave(file=paste0(path_plotaverage, "MCARIaverage.png"))


select_indices(list_sd_and_mean,"NDVI.avg")%>%bind_rows()%>%ggplot(aes(x=as.Date(Date, format="%Y-%m-%d"),y=Mean,color=Condition))+
  ylab("NDVI average")+xlab("Date")+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+geom_point()+theme_bw(base_size = 10)+
  geom_errorbar(aes(ymin=Mean - SD, ymax=Mean+SD),width=.2, position=position_dodge(0.05))+
  scale_color_manual(values = c("Control"="turquoise3", 
                                "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=75, hjust=1.2), legend.text=element_text(size=12),
        legend.title = element_text(size=13),
        axis.title.x = element_text(hjust=1),
        axis.text=element_text(size=13),axis.title=element_text(size=14))

#ggsave("NDVIaverage.pdf")
ggsave(file=paste0(path_plotaverage,"NDVIaverage.png"))

select_indices(list_sd_and_mean,"PSRI.avg")%>%bind_rows()%>%ggplot(aes(x=as.Date(Date, format="%Y-%m-%d"),y=Mean,color=Condition))+
  ylab("PSRI average")+xlab("Date")+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+geom_point()+theme_bw(base_size = 10)+
  geom_errorbar(aes(ymin=Mean - SD, ymax=Mean+SD),width=.2, position=position_dodge(0.05))+
  scale_color_manual(values = c("Control"="turquoise3", 
                                "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=75,hjust=1.2), legend.text=element_text(size=12),
        legend.title = element_text(size=13),
        axis.title.x = element_text(hjust=1),
        axis.text=element_text(size=13),axis.title=element_text(size=14))

#ggsave("PSRIaverage.pdf")
ggsave(file=paste0(path_plotaverage,"PSRI_average.png"))

select_indices(list_sd_and_mean,"QY_max")%>%bind_rows()%>%ggplot(aes(x=as.Date(Date, format="%Y-%m-%d"),y=Mean,color=Condition))+xlab("Date")+
  ylab("QY_max average")+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+geom_point()+theme_bw(base_size = 10)+
  geom_errorbar(aes(ymin=Mean - SD, ymax=Mean+SD),width=.2, position=position_dodge(0.05))+
  scale_color_manual(values = c("Control"="turquoise3", 
                                "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=75,hjust=1.2), ,legend.text=element_text(size=12),
        legend.title = element_text(size=13),
         axis.title.x = element_text(hjust=1),
        axis.text=element_text(size=13),axis.title=element_text(size=14))

#ggsave("QYMax_average.pdf")

ggsave(file=paste0(path_plotaverage,"QYMax_average.png"))


```

Wasserdaten integrieren:

```{r}

list_water_trayNumbers<-c(1,4,5,8,9,12,13,16,17)
list_NDVI_NamesTray<-make_trayInfo_tables(list_NDVIavg_andNames)#hier spuckt er mir noch Warnungen aus....
#Warnung in `[<-.data.frame`(`*tmp*`, nrow(tray_column) + 1, , value = list(
 # Erstzungselement 1 hat 3 Zeilen, um 1 Zeilen zu ersetzen
#Warnung in `[<-.data.frame`(`*tmp*`, nrow(tray_column) + 1, , value = list(
#  Erstzungselement 1 hat 3 Zeilen, um 1 Zeilen zu ersetzen
#Warnung in `[<-.data.frame`(`*tmp*`, nrow(tray_column) + 1, , value = list(

water_tables_all20Genotypes<-lapply(list_NDVI_NamesTray, build_water_info)

dates<-list_mean_sd_Size[[8]]$Measuring.Date
dates<-unique(dates)

water_tables_all20Genotypes_filtered<-lapply(water_tables_all20Genotypes,
                                             function(x){x[is.element(x$Date,dates),]})

vector_names_plantIDs<-c()
for(i in list_NDVIavg_andNames){vector_names_plantIDs[length(vector_names_plantIDs)+1]<-i$Plant.Name[1]}

names(water_tables_all20Genotypes_filtered)<-vector_names_plantIDs
names(water_tables_all20Genotypes)<-vector_names_plantIDs

water_readings_DSOnly_mean_sd<-water_readings_DSOnly%>%mutate(Mean=rowMeans(.[,2:ncol(.)]))%>%mutate(SD=rowSds(as.matrix(.[,2:(ncol(.)-1)])))


list_plots_WaterGenotype_QYMax<-list()
list_plots_WaterGenotype_NDVI<-list()
list_plots_WaterGenotype_PSRI<-list()
list_plots_WaterGenotype_MCARI1<-list()
list_dual_wpotential_QYMaxGenotype<-list()
list_dual_wpotential_NDVIGenotype<-list()
list_dual_wpotential_PSRIGenotype<-list()
list_dual_wpotential_MCARI1Genotype<-list()
```

```{r}

names_andPRIavg<-select_indices(list_meltAndNames, "PRI.avg")

allDatesOneNamePRIavg<-function(f){name_allone<-lapply(names_andPRIavg, testing_fun, z=f)
name_allone<-do.call("rbind", name_allone)
return(name_allone)
}

list_PRIavg_andNames<-list()

PRIavg_sepNames<-for(i in list_of_names){
  list_PRIavg_andNames[[length(list_PRIavg_andNames)+1]]<-allDatesOneNamePRIavg(i)}
#names(list_NDVIavg_andNames)<-list_of_names


list_plot_PRIavg<-list()

for(i in list_PRIavg_andNames){list_plot_PRIavg[[length(list_plot_PRIavg)+1]]<-
  ggplot(i, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=value,group=Plant.Name, color=Condition))+
  theme_bw(base_size = 10)+
  #geom_smooth(aes(color=condition, group=condition))+#kommt eventuell weg
  ylab("PRI average")+xlab("Date")+labs(title=i$Plant.Name.solo[1])+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),fill="lightgrey",alpha=0.02,color="lightgrey")+geom_point()+
  scale_color_manual(values = c("Control"="turquoise3", 
                                "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=75, hjust=1.2), 
        plot.title = element_text(size=16), 
        axis.title.x = element_text(hjust=1),
        legend.text=element_text(size=12),legend.title = element_text(size=13),
        axis.text=element_text(size=13),axis.title=element_text(size=14))}

list_mean_plots_PRIavg<-list()
list_mean_sd_PRIavg<-list()

#make mean and sd_lists of each Genotype in list:
for(i in list_PRIavg_andNames){
  list_mean_sd_PRIavg[[length(list_mean_sd_PRIavg)+1]]<-i%>%
    group_by(Measuring.Date,Condition)%>%
    summarise(Mean=mean(value, na.rm=T),SD=sd(value, na.rm=T))%>%mutate(Name=i$Plant.Name.solo[1])}

#make plots of mean with scatterplots of all genotypes in list:
for(i in 1:length(list_mean_sd_PRIavg)){
  list_mean_plots_PRIavg[[length(list_mean_plots_PRIavg)+1]]<-
    list_plot_PRIavg[[i]]+geom_line(data=list_mean_sd_PRIavg[[i]], 
                                    aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=Mean, 
                                        color=Condition, group=Condition))}
```

Boniturdaten integrieren:

```{r}



Bonitur_1<-read_excel("C:/Users/HabisohnC/Desktop/WhaetVIZ_metadata/WheatVIZ_ClimateChamber_2024_Masterfile.xlsx")

bonitur_run1<-Bonitur_1[1:600,]



vector_PlantID_allBonitur<-c()

Bonitur_mitPlantID<-for(i in seq(1:nrow(bonitur_run1))){
  bonitur_PlantID_allBonitur<-paste(bonitur_run1$Tray[i],bonitur_run1$GenotypeNr[i],
                                    sep="_")
  
  vector_PlantID_allBonitur<-append(vector_PlantID_allBonitur,bonitur_PlantID_allBonitur)
}



Bonitur_all_slim<-cbind.data.frame(bonitur_run1, vector_PlantID_allBonitur)

Bonitur_growthCHamber<-Bonitur_all_slim%>%filter(Location=="ClimateChamber")

Bonitur_growthCHamber<-Bonitur_growthCHamber%>%
  mutate(Date=replace(Date, Date == "20240122", "2024-02-02"))


Bonitur_growthCHamber<-Bonitur_growthCHamber%>%
  mutate(Date=replace(Date, Date == "20240201", "2024-02-07"))%>%
  mutate(Date=replace(Date, Date == "20240214", "2024-02-14"))%>%
  mutate(Date=replace(Date, Date == "20240223", "2024-02-23"))%>%
  mutate(Date=replace(Date, Date == "20240314", "2024-03-13"))


Bonitur_growthCHamber<-Bonitur_growthCHamber%>%
  mutate(Treatment= replace(Treatment, Treatment=="irrigated", "irrigation"))

Bonitur_growthCHamber_slim<-Bonitur_growthCHamber%>%mutate(Nr=NULL, Location=NULL, x_coordinate=NULL, y_coordinate=NULL,Replication=NULL, BBCH=NULL,BBCHmax=NULL, BBCHmin=NULL, Comment=NULL)
Bonitur_growthCHamber_slim<-Bonitur_growthCHamber_slim%>%rename(Plant.ID=vector_PlantID_allBonitur)%>%
  rename(Genotype=GenotypeName)%>%rename(Measuring.Date=Date)%>%relocate(Plant.ID, .after=Measuring.Date)

#verbinden mit den Indices:
NDVI_forBonitur_allDates<-do.call("rbind", list_NDVIavg_andNames)%>%
  mutate(Plant.Name.solo=NULL)%>%rename(NDVI=value)%>%mutate(variable=NULL)

MCARI_forBonitur_allDates<-do.call("rbind", list_MCARI1avg_andNmaes)%>%
  mutate(Plant.Name.solo=NULL)%>%rename(MCARI=value)%>%mutate(variable=NULL)

PRI_forBonitur_allDates<-do.call("rbind", list_PRIavg_andNames)%>%
  mutate(Plant.Name.solo=NULL)%>%rename(PRI=value)%>%mutate(variable=NULL)


#Boni_and_Indices_allDates<-NDVI_forBonitur_allDates%>%
#  inner_join(dplyr::select(MCARI_forBonitur, -Plant.Name, -Condition), by=c("Plant.ID", #"Measuring.Date"))%>%
#  inner_join(dplyr::select(PRI_forBonitur, -Plant.Name, -Condition), by=c("Plant.ID", #"Measuring.Date"))%>%relocate(NDVI, .after = Condition)



Bonitur_Indices_all<-Bonitur_growthCHamber_slim%>%
  inner_join(dplyr::select(NDVI_forBonitur_allDates, Plant.ID, Measuring.Date, NDVI),
             by=c("Plant.ID", "Measuring.Date"))%>%
  inner_join(dplyr::select(MCARI_forBonitur_allDates, Plant.ID, Measuring.Date, MCARI),
             by=c("Plant.ID", "Measuring.Date"))%>%
  inner_join(dplyr::select(PRI_forBonitur_allDates,
                           Plant.ID, Measuring.Date, PRI), by=c("Plant.ID","Measuring.Date"))%>%
  mutate(GenotypeNr=NULL, Tray=NULL, GeneralImpression=NULL)

Bonitur_Indices_all$TillerNumber<-as.numeric(Bonitur_Indices_all$TillerNumber)


```

erste Visualisierungen:

```{r}

for(i in water_tables_all20Genotypes){list_plots_WaterGenotype_QYMax[[length(list_plots_WaterGenotype_QYMax)+1]]<-
 ggplot(i[is.element(i$Date, list_QY_max_andNames[[1]]$Measuring.Date),],
        aes(x=as.Date(Date, format="%Y-%m-%d"),y=Mean))+xlab("Date")+
       scale_y_continuous(name="Mean water potential [kPa]")+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),fill="lightgrey",alpha=0.02,color="lightgrey")+
  theme_bw(base_size = 10)+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16),
        legend.text=element_text(size=12),legend.title = element_text(size=13), 
       axis.title.x = element_text(hjust=1),
        axis.text=element_text(size=13),
        axis.title=element_text(size=14))+
       geom_path(color="darkblue", group=1)}



for(i in water_tables_all20Genotypes){list_plots_WaterGenotype_NDVI[[length(list_plots_WaterGenotype_NDVI)+1]]<-
  ggplot(i[is.element(i$Date, list_NDVIavg_andNames[[1]]$Measuring.Date),],
         aes(x=as.Date(Date, format="%Y-%m-%d"),y=Mean))+xlab("Date")+
  scale_y_continuous(name="Mean water potential [kPa]")+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),fill="lightgrey",alpha=0.02,color="lightgrey")+
  theme_bw(base_size = 10)+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16),
        legend.text=element_text(size=12),legend.title = element_text(size=13),
        axis.title.x = element_text(hjust=1),
        axis.text=element_text(size=13),axis.title=element_text(size=14))+
  geom_path(color="darkblue", group=1)}


for(i in water_tables_all20Genotypes){list_plots_WaterGenotype_PSRI[[length(list_plots_WaterGenotype_PSRI)+1]]<-
  ggplot(i[is.element(i$Date, list_PSRIavg_andNames[[1]]$Measuring.Date),],
         aes(x=as.Date(Date, format="%Y-%m-%d"),y=Mean))+xlab("Date")+
  scale_y_continuous(name="Mean water potential [kPa]")+
  theme_bw(base_size = 10)+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),fill="lightgrey",alpha=0.02,color="lightgrey")+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16),
        legend.text=element_text(size=12),legend.title = element_text(size=13),
        axis.title.x = element_text(hjust=1),
        axis.text=element_text(size=13),axis.title=element_text(size=14))+
  geom_path(color="darkblue", group=1)}


for(i in water_tables_all20Genotypes){list_plots_WaterGenotype_MCARI1[[length(list_plots_WaterGenotype_MCARI1)+1]]<-
  ggplot(i[is.element(i$Date, list_MCARI1avg_andNmaes[[1]]$Measuring.Date),],
         aes(x=as.Date(Date, format="%Y-%m-%d"),y=Mean))+xlab("Date")+
  scale_y_continuous(name="Mean water potential [kPa]")+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),fill="lightgrey",alpha=0.02,color="lightgrey")+
  theme_bw(base_size = 10)+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16),
        legend.text=element_text(size=12),legend.title = element_text(size=13),
         axis.title.x = element_text(hjust=1),
        axis.text=element_text(size=13),axis.title=element_text(size=14))+
  geom_path(color="darkblue", group=1)}
```

duo_plots

```{r}


for(i in 1:length(water_tables_all20Genotypes)){list_dual_wpotential_QYMaxGenotype[[length(list_dual_wpotential_QYMaxGenotype)+1]]<-
    ggarrange(list_mean_plots_QY_max[[i]],list_plots_WaterGenotype_QYMax[[i]], nrow=2, ncol=1, legend = "top", heights=c(1,0.5))
#ggsave(filename=paste0(names(water_tables_all20Genotypes[i]), "QYMaxduo.pdf"))
ggsave(filename=paste0(names(water_tables_all20Genotypes[i]), "QYMaxduo.png"))
}




for(i in 1:length(water_tables_all20Genotypes)){list_dual_wpotential_NDVIGenotype[[length(list_dual_wpotential_NDVIGenotype)+1]]<-
  ggarrange(list_mean_plots_NDVI[[i]],list_plots_WaterGenotype_NDVI[[i]], nrow=2, ncol=1, legend = "top", heights=c(1,0.5))
#ggsave(filename=paste0(names(water_tables_all20Genotypes[i]), "NDVIduo.pdf"))
ggsave(filename=paste0(names(water_tables_all20Genotypes[i]), "NDVIduo.png"))
}



for(i in 1:length(water_tables_all20Genotypes)){list_dual_wpotential_PSRIGenotype[[length(list_dual_wpotential_PSRIGenotype)+1]]<-
  ggarrange(list_mean_plots_PSRI[[i]],list_plots_WaterGenotype_PSRI[[i]], nrow=2, ncol=1, legend = "top",heights=c(1,0.5))
#ggsave(filename=paste0(names(water_tables_all20Genotypes[i]), "PSRIduo.pdf"))
ggsave(filename=paste0(names(water_tables_all20Genotypes[i]), "PSRIduo.png"))
}




for(i in 1:length(water_tables_all20Genotypes)){list_dual_wpotential_MCARI1Genotype[[length(list_dual_wpotential_MCARI1Genotype)+1]]<-
  ggarrange(list_mean_plots_MCARI1[[i]],list_plots_WaterGenotype_MCARI1[[i]], nrow=2, ncol=1, legend = "top", heights=c(1,0.5))
#ggsave(filename=paste0(names(water_tables_all20Genotypes[i]), "MCARIduo.pdf"))
ggsave(filename=paste0(names(water_tables_all20Genotypes[i]), "MCARIduo.png"))
}

```

```{r}

list_dual_wpotential_PRIGenotype<-list()

for(i in 1:length(water_tables_all20Genotypes)){list_dual_wpotential_PRIGenotype[[length(list_dual_wpotential_PRIGenotype)+1]]<-
  ggarrange(list_mean_plots_PRIavg[[i]],list_plots_WaterGenotype_QYMax[[i]], nrow=2, ncol=1, legend = "top", heights=c(1,0.5))
#ggsave(filename=paste0(names(water_tables_all20Genotypes[i]), "PRIduo.pdf"))
ggsave(filename=paste0(names(water_tables_all20Genotypes[i]), "PRIduo.png"))
}
#ggsave(filename="PRI.pdf", plot=marrangeGrob(list_dual_wpotential_MCARI1Genotype, nrow=1, ncol=1))

select_indices(list_sd_and_mean,"PRI.avg")%>%bind_rows()%>%ggplot(aes(x=as.Date(Date, format="%Y-%m-%d"),y=Mean,color=Condition))+
  ylab("PRI average")+xlab("Date")+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),fill="lightgrey",alpha=0.02,color="lightgrey")+geom_point()+theme_bw(base_size = 10)+
  geom_errorbar(aes(ymin=Mean - SD, ymax=Mean+SD),width=.2, position=position_dodge(0.05))+
  scale_color_manual(values = c("Control"="turquoise3","Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),
        axis.title.x = element_text(hjust=1),
        ,legend.text=element_text(size=12),legend.title = element_text(size=13),
        axis.text=element_text(size=13),
        axis.title=element_text(size=14))
#ggsave("PRI_average.pdf")
ggsave("PRI_average.png")


```

plotting selected group only:

```{r}


control_plantsOnlyNDVI<-select_condition(list_mean_sd_NDVI, "Control")%>%bind_rows()%>%drop_na()
control_plantsOnlyQYMax<-select_condition(list_mean_sd_QY_max, "Control")%>%bind_rows()%>%drop_na()
DS_plantsOnlyNDVI<-select_condition(list_mean_sd_NDVI, "Drought stress")%>%bind_rows()%>%drop_na()
DS_plantsOnlyQYMax<-select_condition(list_mean_sd_QY_max, "Drought stress")%>%bind_rows()%>%drop_na()



#expanding the colour palette:

mycolors<-colorRampPalette(brewer.pal(8, "Dark2"))(20)

ggplot(control_plantsOnlyNDVI, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=Mean,group=Name, color=Name))+xlab("Date")+labs(title="NDVI Control Plants")+geom_line()+scale_color_manual(values=mycolors)+theme_bw(base_size = 10)+
      theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16), legend.text=element_text(size=9),legend.title = element_text(size=13),
                         axis.text=element_text(size=13),axis.title=element_text(size=14))+guides(color=guide_legend(override.aes=list(linewidth=5)))
ggsave(filename="controlPlantsOnlyNDVI.png")
#
ggplot(control_plantsOnlyQYMax, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=Mean,group=Name, color=Name))+xlab("Date")+labs(title="QY max Control Plants")+geom_line()+scale_color_manual(values=mycolors)+theme_bw(base_size = 10)+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16), legend.text=element_text(size=9),legend.title = element_text(size=13), 
        axis.text=element_text(size=13),axis.title=element_text(size=14))+guides(color=guide_legend(override.aes=list(linewidth=5)))
ggsave(filename="controlPlantsOnlyQYmax.png")
#
ggplot(DS_plantsOnlyNDVI, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=Mean,group=Name, color=Name))+xlab("Date")+labs(title="NDVI DS Plants")+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),fill="lightgrey",alpha=0.02,color="lightgrey")+geom_line()+scale_color_manual(values=mycolors)+theme_bw(base_size = 10)+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16), legend.text=element_text(size=9),legend.title = element_text(size=13),
        axis.text=element_text(size=13),axis.title=element_text(size=14))+guides(color=guide_legend(override.aes=list(linewidth=5)))
ggsave(filename="DSPlantsOnlyNDVI.png")

#
ggplot(DS_plantsOnlyQYMax, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=Mean,group=Name, color=Name))+xlab("Date")+labs(title="QY max DS Plants")+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),fill="lightgrey",alpha=0.02,color="lightgrey")+geom_line()+scale_color_manual(values=mycolors)+theme_bw(base_size = 10)+
  theme(axis.text.x = element_text(angle=75, hjust=1.2),plot.title = element_text(size=16), legend.text=element_text(size=9),legend.title = element_text(size=13),
        axis.text=element_text(size=13),axis.title=element_text(size=14))+guides(color=guide_legend(override.aes=list(linewidth=5)))
ggsave(filename="DSPlantsOnlyQYMax.png")

```

die trendline plots über alle genotypes:

```{r}
QYmax_allDates<-do.call("rbind", names_andQY_max)
NDVI_allDates<-do.call("rbind", names_andNDVIavg)
MCARI_allDates<-do.call("rbind", names_andMCARI1avg)
names_andMCARI1med<-select_indices(list_meltAndNames, "MCARI1.median")
MCARimedian_allDates<-do.call("rbind", names_andMCARI1med)
names_andPRImedian<-select_indices(list_meltAndNames, "PRI.median")
names_andPRIavg<-select_indices(list_meltAndNames, "PRI.avg")
PRIaverage_allDates<-do.call("rbind", names_andPRIavg)

path_plotaverage<-"plots/"

ggplot(QYmax_allDates, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=value, color=Condition))+
  ylab("QY max")+xlab("Date")+labs(title="QY max all Genotypes")+
  geom_point()+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+theme_bw(base_size = 10)+
  scale_color_manual(values = c("Control"="turquoise3", 
                                "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=90, vjust=0.5, size=9))+
  geom_smooth(method="loess",aes(color=Condition, group=Condition))+geom_point()

ggsave(filename = paste0(path_plotaverage,"QYMax_allGenotypes.pdf"))
ggsave(filename = paste0(path_plotaverage,"QYMax_allGenotypes.png"))




ggplot(NDVI_allDates, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=value, color=Condition))+
  ylab("NDVI average")+xlab("Date")+labs(title="NDVI all Genotypes")+
  geom_point()+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+theme_bw(base_size = 10)+
  scale_color_manual(values = c("Control"="turquoise3", 
                                "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=90, vjust=0.5, size=9))+
  geom_smooth(method="loess",aes(color=Condition, group=Condition))+geom_point()

ggsave(filename = paste0(path_plotaverage,"NDVI_allGenotypes.pdf"))
ggsave(filename = paste0(path_plotaverage,"NDVI_allGenotypes.png"))




ggplot(MCARI_allDates, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=value, color=Condition))+
  ylab("MCARI average")+xlab("Date")+labs(title="MCARI all Genotypes")+
  geom_point()+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+theme_bw(base_size = 10)+
  scale_color_manual(values = c("Control"="turquoise3", 
                                "Drought stress"="coral"))+
  theme(axis.text.x = element_text(angle=90, vjust=0.5, size=9))+
  geom_smooth(method="loess",aes(color=Condition, group=Condition))+geom_point()

ggsave(filename = paste0(path_plotaverage,"MCARI_allGenotypes.pdf"))
ggsave(filename = paste0(path_plotaverage,"MCARI_allGenotypes.png"))

ggplot(PRIaverage_allDates, aes(x=as.Date(Measuring.Date, format="%Y-%m-%d"), y=value, color=Condition))+
    ylab("PRI average")+xlab("Date")+geom_rect(aes(xmin=as.Date("2024-02-12", format="%Y-%m-%d"),xmax=as.Date("2024-03-01", format="%Y-%m-%d"),ymin=-Inf,ymax=Inf),alpha=0.02,fill="lightgrey", color="lightgrey")+labs(title="PRI average all Genotypes")+
    geom_point()+theme_bw(base_size = 10)+
    scale_color_manual(values = c("Control"="turquoise3", 
                                  "Drought stress"="coral"))+
    theme(axis.text.x = element_text(angle=90, vjust=0.5, size=9))+
    geom_smooth(method="loess",aes(color=Condition, group=Condition))+geom_point()

ggsave(filename=paste0(path_plotaverage,"PRIaverage_allGenotypes.pdf"))
ggsave(filename=paste0(path_plotaverage,"PRIaverage_allGenotypes.png"))
```
