---
title: "Functions_Part1"
format: pdf
editor: visual
---

Import libraries

```{r}
library(readxl)
library(tidyverse)
library(reshape2)
library(stringr)
library(sjmisc)
library(ggpubr)
library(matrixStats)
library(gridExtra)
library(corrplot)
```

Sortieren der input files:

```{r}

list_extension<-function(x){
  
  y<-c("Fc_Plant","Kinetic", "Hc_Plant", "Hc_avgSpectrum", "Rgb_Morpho_Plant","Rgb_Color_Plant" )
  for (i in x){
    #y<-c("Fc_Plant","Kinetic", "Hc_Plant", "Hc_avgSpectrum", "Rgb_Morpho_Plant","Rgb_Color_Plant" )
    for (k in y){
      if (str_contains(i,k)==TRUE){
        vector_indices<-c()
        vector_indices[length(vector_indices)+1]=which(x==i)
        
        if (k == "Kinetic"){
          list_Kinetic[length(list_Kinetic)+1]<<-list_dfs[vector_indices]
        }
        
        else if(k == "Hc_Plant"){
          list_Hc_Plant[length(list_Hc_Plant)+1]<<-list_dfs[vector_indices]
        }
        
        else if (k == "Rgb_Morpho_Plant"){
          list_Rgb_Morpho_Plant[length(list_Rgb_Morpho_Plant)+1]<<-list_dfs[vector_indices]
        }
        
        else if (k == "Rgb_Color_Plant"){
          list_Rgb_Color_Plant[length(list_Rgb_Color_Plant)+1]<<-list_dfs[vector_indices]
        }
        
        else if(k=="Fc_Plant"){
          list_Fc_Plant[length(list_Fc_Plant)+1]<<-list_dfs[vector_indices]
        }
        
        else if (k == "Hc_avgSpectrum"){
          list_Hc_avgSpectrum[length(list_Hc_avgSpectrum)+1]<<-list_dfs[vector_indices]
        }}   
      
    }}
  
  
}
```

Mean und SD der jeweiligen Listenelemente

```{r}

join_and_calc<-function(x){
  x%>%
    inner_join(select(metatable, -Tray.Info),
               by="Plant.ID")%>%group_by(variable, Condition)%>%
    summarise_at(vars(value), list(Mean=mean, SD=sd))%>%mutate(Date=x$Measuring.Date[1])}

```

Select item aus Liste

```{r}
select_indices<-function(x,y){
  result<-lapply(x, function(z){
    z%>%filter(variable==y)})
   
  return(result)
}

select_date<-function(x,y){
  result<-lapply(x, function(z){
    z%>%filter(Measuring.Date==y)
  })
  return(result)
}

select_columns<-function(x,y){
  result<-lapply(x, function(z){
    z%>%select(all_of(y))})
  return(result)
}

select_condition<-function(x,y){
  result<-lapply(x, function(z){
    z%>%filter(Condition==y)})
  
  return(result)
}

```

```{r}
testing_fun<-function(x,z){x%>%slice(grep(z, Plant.Name))}


merge_and_select<-function(x){
     x%>%merge(metatable, by="Plant.ID", all=TRUE)%>%select(- Tray.Info)}

 
```

```{r}
#hier wäre ein zusätzlicher loop gut, Index-list loop oder so...
allDatesOneNameNDVIavg<-function(f){name_allone<-lapply(names_andNDVIavg, testing_fun, z=f)
name_allone<-do.call("rbind", name_allone)
return(name_allone)
}


allDatesOneNameNDVImedian<-function(f){name_allone<-lapply(names_andNDVImedian, testing_fun, z=f)
name_allone<-do.call("rbind", name_allone)
return(name_allone)
}


allDatesOneNamePSRIavg<-function(f){name_allone<-lapply(names_andPSRIavg, testing_fun, z=f)
name_allone<-do.call("rbind", name_allone)
return(name_allone)
}


allDatesOneNamePSRImedian<-function(f){name_allone<-lapply(names_andPSRImedian, testing_fun, z=f)
name_allone<-do.call("rbind", name_allone)
return(name_allone)
}


allDatesOneNameQY_max<-function(f){name_allone<-lapply(names_andQY_max, testing_fun, z=f)
name_allone<-do.call("rbind", name_allone)
return(name_allone)
}

allDatesOneNameSize<-function(f){name_allone<-lapply(names_andSize, testing_fun, z=f)
name_allone<-do.call("rbind", name_allone)
return(name_allone)
}


allDatesOneNameMCARI1avg<-function(f){name_allone_MCARI1<-lapply(names_andMCARI1avg, testing_fun, z=f)
name_allone_MCARI1<-do.call("rbind", name_allone_MCARI1)
return(name_allone_MCARI1)}

```

water functions:

```{r}


make_trayInfo_tables<-function(x){
  
  new_list<-list()
  for (i in x){
  tray_column<-data.frame(Tray=1)
  #tray_list<-list()
  
  for(k in i$Plant.Name){
    tray_number<-str_extract_all(k, "\\d+")
    
    tray_column[nrow(tray_column)+1,]<-tray_number
    
    
    
  }
  tray_column<-tray_column[-1,]
  #tray_list[[length(tray_list)+1]]<<-tray_column
  #new_list<-list()
  new_list[[length(new_list)+1]]<-i%>%mutate(Tray=tray_column)
}

  return(new_list)}
```

```{r}

build_water_info<-function(x){
  vector_indices_trays<-c()
  for(k in x$Tray[1:6]){
    
    for(t in list_water_trayNumbers){
      if(k%in%t==TRUE){
       
        vector_indices_trays[length(vector_indices_trays)+1]<-match(t, list_water_trayNumbers)
        }
      
    }
    
  }

  dataframe_new<-do.call(cbind.data.frame, water_readings_justValues[,vector_indices_trays])
  dataframe_new<-dataframe_new%>%
    mutate(Mean=rowMeans(.[,1:ncol(dataframe_new)]))%>%
    mutate(SD=rowSds(as.matrix(dataframe_new),cols = grep("DS", colnames(dataframe_new))))%>%mutate(Date=water_readings_DSOnly$Dates)%>%relocate(Date)
  return(dataframe_new)
}

```
